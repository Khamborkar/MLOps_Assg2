name: MLOps Pipeline with DVC & Docker

on:
  push:
    branches:
      - dev_otherfeatures
  pull_request:
    branches:
      - dev_otherfeatures

jobs:
  # Job 1: Set up environment and download data
  setup_data:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install tensorflow  # Install TensorFlow
          pip install -r requirements.txt

      - name: Install DVC and dependencies
        run: |
          pip install dvc
          pip install torch torchvision

      - name: Set Git identity
        run: |
          git config --global user.email "2023aa05169@wilp.bits-pilani.ac.in"
          git config --global user.name "Khamborkar"

      - name: Initialize DVC
        run: |
          dvc init  # Initializes DVC if not already done

      - name: Download Fashion MNIST data
        run: |
          python -c "
          import torchvision
          import torch
          transform = torchvision.transforms.Compose([torchvision.transforms.ToTensor()])
          torchvision.datasets.FashionMNIST(root='./data', train=True, download=True, transform=transform)
          "

      - name: Track Fashion MNIST data with DVC
        run: |
          dvc add data  # Tracks the downloaded data with DVC
          git add data.dvc .gitignore
          git commit -m "Track Fashion MNIST data with DVC"

  # Job 2: Exploratory Data Analysis (EDA)
  eda:
    needs: setup_data  # This job depends on the setup_data job
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Upgrade setuptools and wheel
        run: |
          python -m pip install --upgrade setuptools wheel

      # - name: Install Numpy first
      #   run: |
      #     pip install numpy==1.23.5 --only-binary :all:

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Run EDA and generate report
        run: |
          python src/main.py eda  # Make sure this runs your EDA and saves to the reports folder

      - name: Upload EDA report as artifact
        uses: actions/upload-artifact@v4
        with:
          name: fashion_mnist_eda
          path: reports/fashion_mnist_eda.html

  # Job 3: Feature Engineering and Explainability (SHAP)
  feature_engineering:
    needs: eda  # This job also depends on the setup_data job
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install SHAP
        run: |
          pip install shap  # Install SHAP for explainability

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Feature Engineering and Explainability
        run: |
          python src/main.py feature_engineering  # Your script for feature engineering and SHAP explanation

      - name: Upload SHAP report as artifact
        uses: actions/upload-artifact@v4
        with:
          name: shap_report
          path: reports/shap_summary_plot.png

  # Job 4: AutoML and Hyperparameter Optimization
  automl:
    needs: feature_engineering  # This job depends on setup_data
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install AutoML dependencies
        run: |
          python -m pip install --upgrade pip
          pip install optuna tpot  # AutoML libraries
          pip install tensorflow  # Install TensorFlow
          pip install -r requirements.txt  # Other dependencies

      - name: Verify TensorFlow Installation
        run: python -c "import tensorflow as tf; print('âœ… TensorFlow Version:', tf.__version__)"

      - name: Run AutoML and Hyperparameter Optimization
        run: |
          python src/main.py automl  # Integrate your AutoML and hyperparameter tuning script here

      - name: Upload Model and Hyperparameter Tuning Results
        uses: actions/upload-artifact@v4
        with:
          name: automl_results
          path: results/automl_report.html

  # Job 5: Model Monitoring and Performance Tracking
  monitoring:
    needs: automl  # This job depends on setup_data
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install MLflow
        run: |
          python -m pip install --upgrade pip
          pip install mlflow  # Install MLflow for model performance tracking
          pip install tensorflow  # Install TensorFlow
          pip install -r requirements.txt  # Other dependencies

      - name: Log Model Performance and Monitoring
        run: |
          python src/main.py monitoring  # Integrate model monitoring and performance logging here

      - name: Upload MLflow Logs
        uses: actions/upload-artifact@v4
        with:
          name: mlflow_logs
          path: mlruns/  # Ensure this path is the one where MLflow logs are stored

  # # Job 6: Build and Push Docker Image (optional)
  # docker:
  #   needs: [setup_data, eda, feature_engineering, automl, monitoring]  # This job depends on all other jobs
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout Repository
  #       uses: actions/checkout@v4

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v2

  #     - name: Log in to DockerHub
  #       uses: docker/login-action@v2
  #       with:
  #         username: ${{ secrets.khamborkar }}
  #         password: ${{ secrets.dckr_pat_Re60MVxgliz9DZfs4QbG1meT0_8 }}

  #     - name: Build and Push Docker Image
  #       run: |
  #         docker build -t ${{ secrets.khamborkar }}/fashion-mnist-mlops:latest .
  #         docker push ${{ secrets.khamborkar }}/fashion-mnist-mlops:latest
